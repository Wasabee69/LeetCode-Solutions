##

class Sparse:
    def __init__(self, arr):
        n = len(arr)
        logn = n.bit_length()
        self.dp = [[0] * n for _ in range(logn + 1)]
        for i in range(n):
            self.dp[0][i] = arr[i]

        for i in range(1, logn + 1):
            for j in range(n - (1 << i) + 1):
                self.dp[i][j] = self.gcd(self.dp[i - 1][j], self.dp[i - 1][j + (1 << (i - 1))])
    def gcd(self, a, b):
        if b == 0:
            return a 
        return self.gcd(b, a%b)
    def query(self, l, r):
        k = r - l + 1
        i = k.bit_length() - 1
        return self.gcd(self.dp[i][l], self.dp[i][r - (1 << i) + 1])

class Solution:
    def minStable(self, nums: list[int], maxC: int) -> int:
        sparse = Sparse(nums)
        n = len(nums)
        def valid(lim):
            cnt = l = 0
            while l < n - lim:
                if sparse.query(l,l+lim)==1:
                    l+=1
                elif sparse.query(l, l+lim) > 1:
                    l += lim + 1
                    cnt += 1
                if cnt > maxC:
                    return False
            return True

        lo, hi = 0, n
        while lo < hi:
            mid = (lo + hi) // 2
            if valid(mid):
                hi = mid
            else:
                lo = mid + 1

        return lo
    
solver = Solution()
print(solver.minStable([3,5,10], 1))
print(solver.minStable([2,4,9,6], 1))
print(solver.minStable([2,6,8], 2))
print(solver.minStable([24726304,265169717,690439018,732342980,142625736,724459053,634747672,657122408,954263312,107023605,450012636,831149731,398181906,423436397,546643482,807984110,874608003,447758501,770543276,331557832,912862305,467637976,145724669,835556316,538410484,907900720,260393002,29981439,156962588,887609995,12015443,804170377,167701172,232233484,433582849,838810007,99161408,233844081,191684057,460904284,621085403,8288009,376552027,899165771,337732813,460053616,924096476,455707653,64477764,632137278,929395603,159135173,420285091,518466433,427623709,879461038,548542538,864316991,69829835,445631636,181975137,379516073,724615205,542971689,29342642,486279079,413898924,144233879,288819103,514392431,609174237,326903603,315582270,360330109,799177369,837438252,379354982,334376955,502608349,664872336,77093334,242659410,528435454,806966887,971658035,358144211,773337927,222316463,601873779,296600857,159313965,613039584,524146718,25137693,786152158,860110928,864406312,363556350,718195888,720097373,506988100,814034927,498208403,680037304,475519063,857903028,153522317,899723400,138317399,520391252,301504756,619446736,219589718,624373056,930508935,106975849,320172276,425521006,392338511,340379339,984702094,565710519,570328035,881454113,86299294,43336392,336872486,400779280,413946383,667010683,960145680,567621640,263758520,86293793,543141304,564717741,401771515,43139430,79229069,628183037,604160572,229436398,615824278,967151,279485766,840465719,254949063,331639922,990094135,564723679,309753659,663789126,323214702,323693108,782066181,270947495,179565169,860819245,307393169,733861398,661646095,471043423,31404932,493321381,631404440,580070280,94563890,239587341,565533413,898742676,997510179,812463306,368506989,683617482,740091065,55690738,398348000,520222419,181659618,442004044,629686340,464947524,474882100,781990201,41361684,234621772,14924751,169416006,978833920,837881141,836173962,318218624,181315539,605058264,505994813,277464645,442936788,100306762,962605534,87561705,369190337,555964952,391837470,74342775,659386438,780501994,601276304,863166416,546873429,656605166,179261551,882973568,220175071,30786483,927292609,956154672,263838797,410541958,953047117,167194343,700139171,32624173,130283835,823789570,721901239,767372981,936317535,997455756,222210694,614353015,438268546,428636085,960514317,895681750,248325452,79470089,949246820,342392225,564044041,782008552,479641674,458889935,576818248,630839555,519771766,827752385,240091418,466116144,332223075,344417435,584067519,419654435,768139657,911258729,637842703,804928036,758839887,182492117,156501936,130496027,585161271,133839115,204346811,597819875,284626049,490478519,647517,377018769,306046089,242085284,839416959,318845763,696083731,563542168,128991775,706793381,680254693,703819645,15613939,586160757,694651753,356850429,681932786,927417478,353889966,571181075,264803361,738932970,334580552,27986303,787925289,240920442,671599364,416733073,414425159,609326204,344181030,315068336,656639561,240696385,362302383,651147474,68255979,255200370,60722946,257606243,652276908,552982335,822582515,731536388,681614459,123374259,507273748,266227656,706930792,439133684,607131063,220317225,917278347,595282056,881520308], 5))
